// $Author: beo1 $
// $Id: Logo.jj 1354 2012-12-05 14:28:28Z beo1 $
//
// Parser and translateor of a subset of Logo into Java

options {
	FORCE_LA_CHECK = true;
	DEBUG_PARSER = true;
	DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Logo)

import java.lang.*;
import java.io.*;
import java.util.*;

public class Logo {

	static private File javaFile, htmlFile;   // output files
	static private PrintWriter pw;            // printwriter used for every output
	static private int numIndent = 0;         // level of indentation
	static private int numRepeat = -1;         // level of repetition

	// to pretty-print the translation
	// uses numIndent and pw defined as static variables in LogoParser
	// writes in pw the numIndent times the indent string
	public static void indent() {
		for (int i=0; i<numIndent; i++) { pw.print("	"); }
	}

	// Main method that reads the source file ".logo" and translates it
	// into two files: ".java" ".html"
	public static void main(String args[]) throws ParseException, TokenMgrError, IOException
	{
		// reads the source file ".logo" (first argument of command line)
		BufferedReader in = new BufferedReader(new FileReader(args[0]));
		Logo parser = new Logo(in);
		try {
			parser.start();
			System.out.println("DONE");
		}
		catch (ParseException x) { System.out.println("Syntaxtic Error"); throw x; }
		catch (TokenMgrError x)  { System.out.println("Lexical Error"); throw x; }
	}
}
PARSER_END(Logo)

// skip separators
SKIP : { <" " | "\t" | "\n" | "\r" | "#" (~["\n", "\r"])*> }

// Constants, pre-defined, operators etc.
TOKEN: { <ADD: "+">   | <SUB: "-">  | <MUL: "*"> | <DIV: "/"> }
TOKEN: { <LPAR: "(">  | <RPAR: ")"> | <#PARSEP: ":"> }
TOKEN: { <LBRA: "[">  | <RBRA: "]"> }
TOKEN: { <EQ: "==">   | <NE: "!=">  }
TOKEN: { <LT: "<">    | <GT: ">">   | <LE: "<="> | <GE: ">="> }
TOKEN: { <AND: "AND"> | <OR: "OR"> }
TOKEN: { <TRUE: "TRUE"> | <FALSE: "FALSE"> | <NOT: "NOT"> }
// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN: { <REPCOUNT: "REPCOUNT"> }
// Keywords
TOKEN: {
	<CLEARSCREEN: "CS"> |
	<PENDOWN: "PD">     | <PENUP: "PU">      |
	<FORWARD: "FD">     | <BACKWARD: "BK">   |
	<LEFTTURN: "LT">    | <RIGHTTURN: "RT">  |
	<HIDETURTLE: "HT">  | <SHOWTURTLE: "ST"> |
	<WAIT: "WAIT">      | <REPEAT: "REPEAT"> |
	<IF: "IF">          | <IFELSE: "IFELSE"> |
	<SUBROUTINE: "TO">  |
	<LOGO: "LOGO">      | <END: "END">
}
// Numerical values, identifiers, and parameters
TOKEN: { <#DIGIT:  ["0"-"9"]> }
TOKEN: { <#LETTER: ["A"-"Z"]> }
TOKEN: { <NUM: (<DIGIT>)+ | (<DIGIT>)+ "." (<DIGIT>)+ > }
TOKEN: { <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > }
TOKEN: { <PARAMETER: <PARSEP> <IDENTIFIER> > // removes parameter separator
//          { matchedToken.image=image.substring(1,image.length()); }
}

void start() throws IOException:
{ Token t; }
{
	// logo programs start with LOGO followed by an identifier
	<LOGO> t = <IDENTIFIER>

	// Creation of the output files
	{
		// Create the HTML file for the applet
		htmlFile = new File(t.image.toLowerCase() + ".html");
		pw = new PrintWriter(new FileOutputStream(htmlFile));
		pw.println("<html>");
		pw.println("	<body>");
		pw.println("		<applet code=\"" + t.image.toLowerCase() + ".class\" width=\"600\" height=\"600\"></applet>");
		pw.println("	</body>");
		pw.println("</html>");
		pw.close();
		//Create the Java file and the class
		javaFile = new File(t.image.toLowerCase() + ".java");
		pw = new PrintWriter(new FileOutputStream(javaFile));
		pw.println("import java.awt.Graphics;\n");
		pw.println("public class " + t.image.toLowerCase() + " extends java.applet.Applet {\n" );
		numIndent++;
		indent();
		pw.println("private LogoPrimitives logo;\n");
		pw.flush();
	}

	( subroutine() )*

	// Open the necessary method "paint" of the applet
	{
		indent(); numIndent++;
		pw.println("public void paint(Graphics g) {");
		indent();
		pw.println("logo = new LogoPrimitives(this);");
		pw.println();
	}

	( statement() )*

	// close the method "paint"
	{
		numIndent--;
		indent();
		pw.println("}");
	}

	// close the class
	<END>
	{
		numIndent--; indent();
		pw.println("}");
		pw.flush(); pw.close();
	}
}

void subroutine():
{
	boolean first = true;
	Token t;
}
{
	<SUBROUTINE>
	t = <IDENTIFIER> {
		indent(); pw.print("private void " + t.image + "(");
		numIndent++;
	}
	(
		t = <PARAMETER> {
			if (first) first = false;
			else pw.print(", ");
			pw.print("double " + t.image.substring(1));
		}
	)* {
		pw.println(") {");
	}
	( statement() )* {
		numIndent--;
		indent(); pw.println("}\n");
	}
	<END>
}

void statement():
{
	boolean first = true;
	Token t;
	String n, b;
	char c;
}
{
	<CLEARSCREEN> {
		indent(); pw.println("logo.cs();");
	}
	| <PENDOWN> {
		indent(); pw.println("logo.pd();");
	}
	| <PENUP> {
		indent(); pw.println("logo.pu();");
	}
	| <HIDETURTLE> {
		indent(); pw.println("logo.ht();");
	}
	| <SHOWTURTLE> {
		indent(); pw.println("logo.st();");
	}
	| <FORWARD> n = nexpr() {
		indent(); pw.println("logo.fd(" + n + ");");
	}
	| <BACKWARD> n = nexpr() {
		indent(); pw.println("logo.bk(" + n + ");");
	}
	| <LEFTTURN>  n = nexpr() {
		indent(); pw.println("logo.lt(" + n + ");");
	}
	| <RIGHTTURN> n = nexpr() {
		indent(); pw.println("logo.rt(" + n + ");");
	}
	| <WAIT> n = nexpr() {
		indent(); pw.println("logo.wait(" + n + ");");
	}
	| <REPEAT> n = nexpr()
		<LBRA> {
			numRepeat++;
			c = Character.toChars('i' + numRepeat)[0];
			indent(); pw.println("for (int " + c + " = 1; " + c + " <= " + n + "; " + c + "++) {");
			numIndent++;
		}
		( statement() )*
		<RBRA> {
			numIndent--; numRepeat--;
			indent(); pw.println("}");
		}
	| <IF> b = bexpr()
		<LBRA> {
			indent(); pw.println("if (" + b + ") {");
			numIndent++;
		}
		( statement() )*
		<RBRA> {
			numIndent--;
			indent(); pw.println("}");
		}
	| <IFELSE> b = bexpr()
		<LBRA> {
			indent(); pw.println("if (" + b + ") {");
			numIndent++;
		}
		( statement() )*
		<RBRA> <LBRA> {
			numIndent--;
			indent(); pw.println("} else {");
			numIndent++;
		}
		( statement() )*
		<RBRA> {
			numIndent--;
			indent(); pw.println("}");
		}
	| t = <IDENTIFIER> {
			indent(); pw.print(t.image + "(");
		}
		(
			n = nexpr() {
				if (first) first = false;
				else pw.print(", ");
				pw.print(n);
			}
		)* {
			pw.println(");");
		}
}

String nexpr():
{
	StringBuilder r = new StringBuilder();
	Token o;
	String n;
}
{
	n = nterm() {
		r.append(n);
	}
	(
		( o = <ADD> | o = <SUB> )
		n = nterm() {
			r.append(o.image).append(n);
		}
	)* {
		return r.toString();
	}
}

String nterm():
{
	StringBuilder r = new StringBuilder();
	Token o;
	String n;
}
{
	n = nfactor() {
		r.append(n);
	}
	(
		( o = <MUL> | o = <DIV> )
		n = nfactor() {
			r.append(o.image).append(n);
		}
	)* {
		return r.toString();
	}
}

String nfactor():
{
	String n;
}
{
	<SUB> n = nfactor_pos() {
		return "-" + n;
	}
	| n = nfactor_pos() {
		return n;
	}
}

String nfactor_pos():
{
	Token n;
	String m;
}
{
	n = <NUM> {
		return n.image;
	}
	| <REPCOUNT> {
		return Character.toString(Character.toChars('i' + numRepeat)[0]);
	}
	| n = <PARAMETER> {
		return n.image.substring(1);
	}
	| <LPAR> m = nexpr() <RPAR> {
		return "(" + m + ")";
	}
}

String bexpr():
{
	StringBuilder r = new StringBuilder();
	String b;
}
{
	b = bterm() {
		r.append(b);
	}
	(
		<OR>
		b = bterm() {
			r.append(" or ").append(b);
		}
	)* {
		return r.toString();
	}
}

String bterm():
{
	StringBuilder r = new StringBuilder();
	String b;
}
{
	b = bfactor() {
		r.append(b);
	}
	(
		<AND>
		b = bfactor() {
			r.append(" and ").append(b);
		}
	)* {
		return r.toString();
	}
}

String bfactor():
{
	Token o;
	String b, l, r;
}
{
	<TRUE> {
		return "true";
	}
	| <FALSE> {
		return "false";
	}
	| <NOT> <LPAR> b = bexpr() <RPAR> {
		return "not (" + b + ")";
	}
	| l = nexpr() ( o = <EQ> | o = <NE> | o = <LT> | o = <GT> | o = <LE> | o = <GE> ) r = nexpr() {
		return l + o.image + r;
	}
}
